name: Build and Test

on:
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v1

      - name: Determine required .NET SDK version
        id: dotnet-version
        run: |
          export DOTNET_VERSION=$(dotnet --list-sdks | awk '/7\.0\./ {print $1; exit}')
          echo "::set-output name=dotnet-version::$DOTNET_VERSION"

      - name: Download and install .NET SDK
        run: |
          export DOTNET_INSTALL_DIR="$HOME/.dotnet"
          export DOTNET_VERSION="${{ steps.dotnet-version.outputs.dotnet-version }}"
          export DOTNET_INSTALL_SCRIPT_URL="https://dot.net/v1/dotnet-install.sh"
          export DOTNET_INSTALL_ARGS="--install-dir $DOTNET_INSTALL_DIR --version $DOTNET_VERSION --no-path"

          mkdir -p "$DOTNET_INSTALL_DIR"
          curl -Lsfo dotnet-install.sh $DOTNET_INSTALL_SCRIPT_URL
          bash dotnet-install.sh $DOTNET_INSTALL_ARGS

          export PATH="$DOTNET_INSTALL_DIR:$PATH"

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release

      - name: Run tests with coverage
        run: dotnet test --configuration Release --no-restore --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=lcov /p:CoverletOutput=./lcov

      - name: Calculate coverage percentage
        run: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator "-reports:./lcov/*.xml" "-targetdir:coverage-report" "-reporttypes:HtmlInline_AzurePipelines"

      - name: Extract coverage percentage
        id: coverage
        run: |
          total=$(grep -oP '(?<=<line.*covered=")[0-9]+' coverage-report/Summary/index.htm | paste -sd+ - | bc)
          covered=$(grep -oP '(?<=<line.*total=")[0-9]+' coverage-report/Summary/index.htm | paste -sd+ - | bc)
          echo "Total lines: $total"
          echo "Covered lines: $covered"
          percentage=$(echo "scale=2; $covered / $total * 100" | bc)
          echo "::set-output name=coverage-percentage::$percentage"

      - name: Display coverage percentage
        run: echo "Code coverage: ${{ steps.coverage.outputs.coverage-percentage }}%"
